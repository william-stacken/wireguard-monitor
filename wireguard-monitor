#!/bin/bash

# --- Default settings
iconSize=32                     # Icon size
fontFamily="JetBrains Mono"     # Font family
errorColor="ff4400"
ipColor="9dffa8"
endpointColor="707eff"
handshakeColor="a164e0"
transferColor="f1e552"
refreshCommand=""
interface=""

# --- vars
scriptDir=$(dirname $(realpath ${0}))

# --- Arguments parsing
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -n|--name)
        refreshCommand="xfce4-panel --plugin-event=genmon-$2:refresh:bool:true"
        shift # past argument
        shift # past value
        ;;
        -w|--interface)
        interface="$2"
        shift # past argument
        shift # past value
        ;;
        -i|--icon)
        iconSize="$2"
        shift # past argument
        shift # past value
        ;;
        -f|--face)
        fontFamily="$2"
        shift # past argument
        shift # past value
        ;;
        -e|--error)
        errorColor="$2"
        shift # past argument
        shift # past value
        ;;
        -p|--ip)
        ipColor="$2"
        shift # past argument
        shift # past value
        ;;
        -n|--endpoint)
        endpointColor="$2"
        shift # past argument
        shift # past value
        ;;
        -h|--handshake)
        handshakeColor="$2"
        shift # past argument
        shift # past value
        ;;
        -t|--transfer)
        transferColor="$2"
        shift # past argument
        shift # past value
        ;;
        -c|--command)
        refreshCommand="$2"
        shift # past argument
        shift # past value
        ;;
        *)    # unknown option
        # Get icon sizes list
        foundIconSizes=$(echo $(ls -1 ${scriptDir}/icons/wg-on-*.png | sed -n "s/.*\wg-on-\([0-9]*\)\.png/\1/p"))
        echo "wireguard-monitor commandline arguments:"
        echo -e "    Short name | Long name | Default value | Description"
        echo -e "    -n --name 10\t\tWidget/plugin name"
        echo -e "    -i --icon ${iconSize}\t\tIcon size. Founded sizes: ${foundIconSizes}"
        echo -e "    -f --face '${fontFamily}'\tFont family"
        echo -e "    -e --error ${errorColor}\t\tError color"
        echo -e "    -p --ip ${ipColor}\t\tIp color"
        echo -e "    -n --endpoint ${endpointColor}\tEndpoint color"
        echo -e "    -h --handshake ${handshakeColor}\tHandshake color"
        echo -e "    -t --transfer ${transferColor}\tTransfer color"
        echo -e "    -c --command \t\tCommand to execute on click"
        exit 0
        ;;
    esac
done

# --- WG state parsing
# Get wg state
wgState=$(sudo wg show)
if [[ -n $wgState ]]
then
    if [[ $wgState =~ ^.*endpoint:.([0-9.]+).*handshake:.(.*)transfer:.(.*)received,.(.*).*sent.*$ ]]
    then
        endpoint=${BASH_REMATCH[1]}
        latestHandshake=${BASH_REMATCH[2]}
        dn=${BASH_REMATCH[3]}
        up=${BASH_REMATCH[4]}
        wgString="<span face='${fontFamily}' foreground='#${endpointColor}'>Endpoint: </span>${endpoint}"
        wgString+="\n<span face='${fontFamily}' foreground='#${handshakeColor}'>Latest handshake: </span>${latestHandshake}"
        wgString+="\n<span face='${fontFamily}' foreground='#${transferColor}'>Transfer: </span>↓${dn}, ↑${up}"

        # Assume ip has been set properly
        ip=$endpoint
        ping -c 1 -w 1 $ip >/dev/null
        if [[ $? -ne 0 ]]
        then
            iconType="na"
            ipError="[Offline or network error]"
            # IP string formatting:
            ipString="\n<span face='${fontFamily}' foreground='#${errorColor}'>IP: ${ipError}</span>"
        else
            iconType="on"
        fi
    else
        iconType="na"
        ipError="[Not connected, restart or wait]"
        # IP string formatting:
        ipString="<span face='${fontFamily}' foreground='#${errorColor}'>IP: ${ipError}</span>"
    fi
    toggleType="down"
else
    wgString="<span face='${fontFamily}' foreground='#${errorColor}'>Off</span>"
    iconType="off"
    toggleType="up"
fi

# --- Icon click and text (for script start error case) click command - script restart
if [[ -n "$interface" && -n "$toggleType" ]]
then
    command="bash -c \"pkexec wg-quick ${toggleType} '${interface}' 2>/dev/null; sleep 2; ${refreshCommand}\""
else
    command="${refreshCommand}"
fi
result="<click>${command}</click>"
result+="<txtclick>${command}</txtclick>"


# --- Setting icon and tooltip
result+="<img>${scriptDir}/icons/wg-${iconType}-${iconSize}.png</img>"
result+="<tool>${wgString}${ipString}</tool>"

# --- Echo result
echo -e $result

